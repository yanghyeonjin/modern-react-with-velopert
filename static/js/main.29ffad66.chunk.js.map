{"version":3,"sources":["components/User.js","hooks/useInput.js","components/CreateUser.js","App.js","serviceWorker.js","index.js"],"names":["memo","user","dispatch","useContext","UserDispatch","id","username","email","active","useEffect","console","log","onToggle","useCallback","type","onRemove","className","onClick","useInput","initialForm","useState","form","setForm","onChange","e","target","name","value","reset","nextId","useRef","onCreate","current","placeholder","initialState","users","reducer","state","action","map","filter","createContext","App","useReducer","count","useMemo","length","countActiveUsers","Provider","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.29ffad66.chunk.js","sourcesContent":["import React, { memo, useEffect, useContext, useCallback } from 'react';\r\nimport './User.css';\r\n\r\n// Context\r\nimport { UserDispatch } from '../App';\r\n\r\nfunction User({ user }) {\r\n    const dispatch = useContext(UserDispatch);\r\n    const { id, username, email, active } = user;\r\n\r\n    useEffect(() => {\r\n        console.log('user 값이 설정됨.')\r\n        console.log(user);\r\n\r\n        return () => {\r\n            console.log('user 가 바뀌기 전..');\r\n            console.log(user);\r\n        };\r\n    }, [user]);\r\n\r\n\r\n\r\n    const onToggle = useCallback((id) => {\r\n        dispatch({\r\n            type: 'TOGGLE_USER',\r\n            id\r\n        })\r\n    }, [dispatch])\r\n\r\n    const onRemove = useCallback((id) => {\r\n        dispatch({\r\n            type: 'REMOVE_USER',\r\n            id\r\n        })\r\n    }, [dispatch])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <b className={active ? 'username active' : 'username'} onClick={() => onToggle(id)}>{username}</b> <span>({email})</span>\r\n            <button onClick={() => onRemove(id)}>삭제</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(User);","import { useState, useCallback } from 'react';\r\n\r\nfunction useInput(initialForm) {\r\n    const [form, setForm] = useState(initialForm);\r\n\r\n    // change\r\n    const onChange = useCallback((e) => {\r\n        const { name, value } = e.target;\r\n        setForm({ ...form, [name]: value })\r\n    }, [form]);\r\n\r\n    const reset = useCallback(() => {\r\n        setForm(initialForm)\r\n    }, [initialForm])\r\n\r\n    return [form, onChange, reset];\r\n}\r\n\r\nexport default useInput;","import React, { memo, useContext, useCallback, useRef } from 'react';\r\nimport useInput from '../hooks/useInput';\r\nimport { UserDispatch } from '../App';\r\n\r\nfunction CreateUser() {\r\n    const [form, onChange, reset] = useInput({\r\n        username: '',\r\n        email: ''\r\n    });\r\n    const { username, email } = form;\r\n    const dispatch = useContext(UserDispatch);\r\n    const nextId = useRef(4);\r\n\r\n    const onCreate = useCallback(() => {\r\n        dispatch({\r\n            type: 'CREATE_USER',\r\n            id: nextId.current,\r\n            username,\r\n            email\r\n        })\r\n\r\n        reset();\r\n        nextId.current += 1;\r\n    }, [email, username, reset, dispatch]);\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                name=\"username\"\r\n                placeholder=\"계정명\"\r\n                onChange={onChange}\r\n                value={username}\r\n            />\r\n            <input\r\n                name=\"email\"\r\n                placeholder=\"이메일\"\r\n                onChange={onChange}\r\n                value={email}\r\n            />\r\n            <button onClick={onCreate}>등록</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(CreateUser);","import React, { useMemo, useReducer, createContext } from 'react';\n\nimport User from './components/User';\nimport CreateUser from './components/CreateUser';\n\n\nconst initialState = {\n  users: [\n    {\n      id: 1,\n      username: 'velopert',\n      email: 'public.velopert@gmail.com',\n      active: true\n    },\n    {\n      id: 2,\n      username: 'tester',\n      email: 'tester@example.com',\n      active: false\n    },\n    {\n      id: 3,\n      username: 'liz',\n      email: 'liz@example.com',\n      active: false\n    }\n  ]\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CREATE_USER':\n      return {\n        ...state,\n        users: [\n          ...state.users,\n          {\n            id: action.id,\n            username: action.username,\n            email: action.email\n          }\n        ]\n      }\n    case 'TOGGLE_USER':\n      return {\n        ...state,\n        users: state.users.map(user => user.id === action.id ? { ...user, active: !user.active } : user)\n      }\n    case 'REMOVE_USER':\n      return {\n        ...state,\n        users: state.users.filter((user) => user.id !== action.id)\n      }\n    default:\n      return state;\n  }\n}\n\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자 수 세는 중...');\n  return users.filter((user) => user.active).length;\n}\n\n\n// Context API 사용\nexport const UserDispatch = createContext(null);\n\n\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const { users } = state;\n\n  const count = useMemo(() => countActiveUsers(users), [users]);\n\n\n  return (\n    <UserDispatch.Provider value={dispatch}>\n      <CreateUser />\n      {users.map(user => <User key={user.id} user={user} />)}\n      <div>활성사용자 수: {count}</div>\n    </UserDispatch.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}